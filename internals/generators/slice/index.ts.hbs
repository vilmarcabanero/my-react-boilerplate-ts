import { PayloadAction } from '@reduxjs/toolkit';
import { createSlice } from 'utils/@reduxjs/toolkit';
import { useInjectReducer, useInjectSaga } from 'utils/redux-injectors';
import { {{ camelCase parent }}Saga } from '../saga/_index';
// import * as U from './utils';
import * as I from './types';

export const initialState: Types.{{ properCase parent }}State = {
  someState: '',
  // [INSERT NEW STATE ABOVE] <
};

const slice = createSlice({
  name: '{{ camelCase parent }}',
  initialState,
  reducers: {
    someAction(state, action: PayloadAction<any>) {},
    // [INSERT NEW ACTION KEY ABOVE] <
  },
});

export const { actions: {{ camelCase parent }}Actions } = slice;

export const use{{ properCase parent }}Slice = () => {
  useInjectReducer({ key: slice.name, reducer: slice.reducer });
  useInjectSaga({ key: slice.name, saga: {{ camelCase parent }}Saga });
  return { actions: slice.actions };
};

/**
 * Example Usage:
 *
 * export function MyComponentNeedingThisSlice() {
 *  const { actions } = use{{ properCase parent }}Slice();
 *
 *  const onButtonClick = (evt) => {
 *    dispatch(actions.someAction());
 *   };
 * }
 */
